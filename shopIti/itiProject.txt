#region start 1 
	#region git
		git init
		git add .
		git commit -m "Initial commit"
		git remote add origin url--
		git push -u origin master

		git branch feature1
		git checkout -b feature1
		git push -u origin feature1

		git checkout main
		git merge feature1
		git push origin main
	#endregion

	#region flowbite init
		ng new my-app --no-standalone
		npm install tailwindcss --save-dev
		npx tailwindcss init

		@tailwind base;
		@tailwind components;
		@tailwind utilities;

		npm install flowbite

		/** @type {import('tailwindcss').Config} */
		module.exports = {
		  content: [
		    "./src/**/*.{html,ts}",
		    "./node_modules/flowbite/**/*.js" // add this line
		  ],
		  theme: {
		    extend: {},
		  },
		  plugins: [
		    require('flowbite/plugin')
		  ],
		}

		import { Component } from '@angular/core';
		import { OnInit } from '@angular/core';
		import { initFlowbite } from 'flowbite';

		@Component({
		  selector: 'app-root',
		  templateUrl: './app.component.html',
		  styleUrls: ['./app.component.css']
		})
		export class AppComponent implements OnInit {
		  title = 'web-app';

		  ngOnInit(): void {
		    initFlowbite();
		  }
		}
	#endregion

	#region icons
		npm i @ng-icons/core
		npm i @ng-icons/bootstrap-icons @ng-icons/css.gg
	    NgIconsModule.withIcons({ bootstrapCart4, bootstrapTrash3, bootstrapInfoCircleFill,bootstrapList,cssAdd}),
        <button
            class="text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800"
            (click)="buy(prd.price,itemCount.value)">
            <ng-icon name="bootstrapCart4"></ng-icon>
        </button>
        <button
            class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 mx-3">
            <ng-icon name="bootstrapInfoCircleFill"></ng-icon>
        </button>
        <button
            class="text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
            <ng-icon name="bootstrapTrash3"></ng-icon>
        </button>
	#endregion

	#region structure
		components
		ng g c home 
		ng g c productList
		ng g c cart
		ng g c order

		shared
		ng g c header
		ng g c footer
		ng g c sidebar

		view
		ng g class data

		models
		ng g i iproduct

		directive
		ng g directive lightbox

		pipe
		ng g pipe usdToEgp

		services
		ng g s product
	#endregion
#endregion

#region product cart 2
	#region class static binding
		ng g class data
		export class CartData {
		    constructor(
		        public name:string,
		        public imgUrl:string,
		        public description:string,
		        public rating:number,
		        public price:number,
		        public branches:string[]){
		    }
		}
	  	cartDataDetail!:CartData
			https: any;
		  	constructor(){
		    this.cartDataDetail=new CartData('pq','https://picsum.photos/2000/1100','d1',4,1000,['cairo','alex'])
		  	}

      	<a href="#">
        <img class="rounded-t-lg" [src]="cartDataDetail.imgUrl" alt="product image" />
    	</a>
	#endregion
#endregion

#region productlist 3
  prdList!:IProducts[]
  catList!:ICategory[]
  totalPrice!:number
  selectedCatId:number=0
  dateNow!:Date
  constructor(){
    this.prdList=[
      {id:1,name:'p1',price:100,quantity:1,imgUrl:'https://picsum.photos/2000/1100',categoryId:1},
      {id:2,name:'p2',price:110,quantity:2,imgUrl:'https://picsum.photos/2000/1200',categoryId:2},
      {id:3,name:'p3',price:120,quantity:0,imgUrl:'https://picsum.photos/2000/1300',categoryId:3},
      {id:4,name:'p4',price:130,quantity:4,imgUrl:'https://picsum.photos/2000/1400',categoryId:4},
      {id:5,name:'p5',price:140,quantity:5,imgUrl:'https://picsum.photos/2000/1500',categoryId:5},
      {id:6,name:'p6',price:150,quantity:6,imgUrl:'https://picsum.photos/2000/1600',categoryId:6},
    ]
    this.catList=[
      {id:1,name:'c1'},
      {id:2,name:'c2'},
      {id:3,name:'c3'},
      {id:4,name:'c4'},
    ]
    this.dateNow=new Date()
  }
  buy(prdPrice:number,count:any){
     this.totalPrice=+count*prdPrice
  }
	#region html
		<td class="px-6 py-4">
			<div class="flex items-center">
				<div>
					<input type="number" id="first_product"
						class="bg-gray-50 w-14 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block px-2.5 py-1 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="0" [(ngModel)]="itemCount.value"  #itemCount required>
				</div>

			</div>
		</td>

		<td class="px-6 py-4 text-center">
			<div *ngIf="prd.quantity!=0;else elseBlock" #itemCount>
				{{prd.quantity}}
			</div>
			<ng-template #elseBlock>
				hidden
			</ng-template>
		</td>
	#endregion
  #region cat
	  <select name="cat" id="cat"
	    class=" grid justify-center my-3 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500  w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
		    <option *ngFor="let cat of catList" [value]="cat.id" #cat [(ngModel)]="selectedCatId">
		        {{cat.name}}
		    </option>
		</select>
  #endregion
#endregion

#region directives 4
	@Directive({
	  selector: '[appLightbox]'
	})
	export class LightboxDirective {
	  @Input() defaultColor:string='blue'
	  @Input() hoverColor:string='green'
	  constructor(private elRef: ElementRef) {
	    this.elRef.nativeElement.style.border=`2px solid ${this.defaultColor}`
	  }
	  @HostListener('mouseover') onMouseOver(){
	    this.elRef.nativeElement.style.border=`2px solid ${this.hoverColor}`
	  }
		  @HostListener('mouseout') onMouseOut(){
		    this.elRef.nativeElement.style.border=`2px solid ${this.defaultColor}`
		  }
	}

    <td class="p-4">
    </td>
#endregion

#region pipes 5
	@Pipe({
	  name: 'usdToEgp'
	})
	export class UsdToEgpPipe implements PipeTransform {

	  transform(value: number): number {
	    return value*55;
	  }

	}

    <td class="px-6 py-4 font-semibold text-gray-900 dark:text-white">
        {{prd.price |usdToEgp |currency :'EGP':'symbol'}}
    </td>
    <td class="px-6 py-4 font-semibold text-gray-900 dark:text-white">
        {{totalPrice |usdToEgp |currency :'EGP':'symbol'}}
    </td>
#endregion 

#region life cycle 6
	constructor
	ngOnChanges
	ngOnInit
	ngDoCheck
		ngAfterContentInit
		ngAfterContentChecked
			
		ngAfterViewInit
		ngAfterViewChecked
	ngOnDestroy
#endregion

#region interaction 7
	#region without input output
		import { FormsModule } from '@angular/forms';
		<select name="cat" id="cat"
			class=" grid justify-center my-3 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500  w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
			(change)="filterByCat()" [(ngModel)]="selectedCatId" >
			<option *ngFor="let cat of catList" [value]="cat.id" #cat >
				{{cat.name}}
			</option>
		</select>
		<div>
			<span class="bg-green-100 text-green-800 text-sm font-medium me-2 px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300">date : {{dateNow | date:'longDate'}}</span>
		</div>

		<ng-container *ngFor="let prd of prdListOfCat; let i=index">

		catList!: ICategory[]
		totalPrice!: number
		selectedCatId!: number
		filterByCat() {
			this.prdListOfCat = this.prdList.filter(prd => prd.categoryId == this.selectedCatId) //value of catList.id
		}
	#endregion

	#region with input output
		#region input parent master child list
			((((((((((((((1))))))))))))))
			#region Parent
				selectedCatId: number=0;
				catList!: ICategory[];
				sentCatId!: number;

				constructor() { 
					this.catList = [
					{ id: 100, name: 'c1' },
					{ id: 200, name: 'c2' },
					{ id: 300, name: 'c3' },
					{ id: 400, name: 'c4' },
					]
				}
				<select name="cat" id="cat"
					class=" grid justify-center my-3 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500  w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
					[(ngModel)]="selectedCatId">  //selectedCatId =>fill html parent
					
					<option *ngFor="let cat of catList" [value]="cat.id" #cat>
						{{cat.name}}
					</option>
				</select>
			#endregion

			((((((((((((((2 child))))))))))))))
			selectedCatId: number=0;
			@Input() sentCatId!:number // send catId Empty in child
			#endregion
				ngOnChanges(): void {
						this.filterByCat()
					}
					private filterByCat() {
						this.prdListOfCat = this.prdList.filter(prd => prd.categoryId == this.sentCatId)
					}
			#endregion
			((((((((((((((3)))))))))))))) html child inside parent html
			<app-product-list [sentCatId]="selectedCatId"/>

		#region filter with input

		#region output
			//((((((((((((((total price is child of productlist))))))))))))))
			  @Output() totalPriceChanged!:EventEmitter<number> 
  				totalPrice:number=0
			constructor(){this.totalPriceChanged = new EventEmitter<number>()}

			buy(prdPrice: number, count: any) {
				this.totalPrice += +count * prdPrice
				this.totalPriceChanged.emit(this.totalPrice)
			}
			#region html
				<div>
					<input type="number" id="first_product"
						class="bg-gray-50 w-14 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block px-2.5 py-1 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="0" [(ngModel)]="Count.value" #Count required>
				</div>
				<button
				class="text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800"
				(click)="buy(i.price,Count.value)">
					<ng-icon name="bootstrapCart4"></ng-icon>
				</button>
			#endregion
			//((((((((((((((((((productlist of parent category))))))))))))))))))
			selectedCatId:number=0
			receiveOrderTotalPrice!:number

			
			onTotalPriceChange(totalPrice: number) {
				this.receiveOrderTotalPrice=totalPrice
			}
			<app-product-list [sentCatId]="selectedCatId" (totalPriceChanged)="onTotalPriceChange($event)"/>
		#endregion
	#endregion
	#region viewChild //wanna work
		@ViewChild(ProductListComponent) productListObj!:ProductListComponent
		clg =>parent
	#endregion
#endregion

#region services 8
	#region crud
		prdList!: IProducts[]
		constructor() {
			this.prdList = [
			{ id: 1, name: 'p1', price: 100, quantity: 1, imgUrl: 'https://picsum.photos/2000/1100', categoryId: 1 },
			{ id: 2, name: 'p2', price: 110, quantity: 2, imgUrl: 'https://picsum.photos/2000/1200', categoryId: 2 },
			{ id: 3, name: 'p3', price: 120, quantity: 0, imgUrl: 'https://picsum.photos/2000/1300', categoryId: 3 },
			{ id: 4, name: 'p4', price: 130, quantity: 4, imgUrl: 'https://picsum.photos/2000/1400', categoryId: 4 },
			{ id: 5, name: 'p5', price: 140, quantity: 5, imgUrl: 'https://picsum.photos/2000/1500', categoryId: 1 },
			{ id: 6, name: 'p6', price: 150, quantity: 6, imgUrl: 'https://picsum.photos/2000/1600', categoryId: 1 },
			]
		}
		getAll(): IProducts[] {
			return this.prdList
		}
		getAllByCatId(catId: number): IProducts[] {
			if (catId == 0)
			return this.prdList
			else
			return this.prdList.filter(prd => prd.categoryId == catId)
		}
		getById(id: number): IProducts | null {

			let foundPrd = this.prdList.find(prd => prd.id == id)
			return foundPrd ? foundPrd : null
		}
		add(prd:IProducts){
			this.prdList.push(prd)
		}
	#endregion
	
	#region afterCrud

		// prdList!: IProducts[] // sent to service
		prdListOfCat: IProducts[] = []
		catList!: ICategory[]
		totalPrice: number = 0
		@Input() sentCatId!: number
		dateNow!: Date
		@Output() totalPriceChanged!: EventEmitter<number>
		constructor(private productService: StaticProductsService,private router:Router) {
			// this.prdList = [
			//   { id: 1, name: 'p1', price: 100, quantity: 1, imgUrl: 'https://picsum.photos/2000/1100', categoryId: 1 },
			//   { id: 2, name: 'p2', price: 110, quantity: 2, imgUrl: 'https://picsum.photos/2000/1200', categoryId: 2 },
			//   { id: 3, name: 'p3', price: 120, quantity: 0, imgUrl: 'https://picsum.photos/2000/1300', categoryId: 3 },
			//   { id: 4, name: 'p4', price: 130, quantity: 4, imgUrl: 'https://picsum.photos/2000/1400', categoryId: 4 },
			//   { id: 5, name: 'p5', price: 140, quantity: 5, imgUrl: 'https://picsum.photos/2000/1500', categoryId: 1 },
			//   { id: 6, name: 'p6', price: 150, quantity: 6, imgUrl: 'https://picsum.photos/2000/1600', categoryId: 1 },
			// ]
			this.dateNow = new Date()
			this.totalPriceChanged = new EventEmitter<number>()
		}
		ngOnChanges(): void {
			// this.filterByCat()
			this.prdListOfCat = this.productService.getAllByCatId(this.sentCatId)
		}
		ngOnInit(): void {
			// this.prdListOfCat=this.prdList
			this.prdListOfCat = this.productService.getAll()
		}
		buy(prdPrice: number, count: any) {
			this.totalPrice += +count * prdPrice
			this.totalPriceChanged.emit(this.totalPrice)
		}
		showDetails(pid: number) {
			this.router.navigate(['/products',pid])
		}
		// private filterByCat() {
		//   // this.prdListOfCat = this.prdList.filter(prd => prd.categoryId == this.sentCatId)
		// }
	#endregion
#endregion

#region routing 9
	[routerLink]="['']" [routerLinkActive]="['text-green-500']"
	[routerLinkActiveOptions]="{exact:true}"

	const routes: Routes = [
		{path:'',component:MainLayoutComponent,children:[
			{path:'',redirectTo:'/home',pathMatch:'full'},
			{path:'home',component:HomeComponent},
			{path:'products',component:ProductListComponent},
			{path:'products/:pid',component:ProductDetailsComponent},
			{path:'order',component:OrderMasterComponent},
		]},
		{path:'login',component:LoginComponent},
		{path:'register',component:RegisterComponent},
		{path:'**',component:NotFoundError}
	];
	#region activatedRoute
		{path:'products/:pid',component:ProductDetailsComponent},
		import { Location } from '@angular/common'

		currPrdId!: number
		prd!: IProducts | null
		prdIdsList: number[] = []
		constructor(
			private activateRoute: ActivatedRoute
			, private prdService: StaticProductsService
			, private router: Router
			, private location: Location) { }

		goBack() {
			this.location.back()
			this.prd = this.prdService.getById(this.currPrdId)
		}
		#region buttons
			<div class="flex justify-center my-3">
				<!-- Previous Button -->
				<button class="flex items-center justify-center px-3 h-8 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
					(click)="goPrev()" [disabled]="currPrdId==prdIdsList[0]">
					Previous
				</button>
				<a class="flex items-center justify-center px-3 h-8 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white mx-3"
					(click)="goBack()">
					go back
				</a>

				<!-- Next Button -->
				<button  class="flex items-center justify-center px-3 h-8  text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
					(click)="goNext()" [disabled]="currPrdId==prdIdsList[prdIdsList.length-1]">
					Next
				</button>
			</div>
		#endregion

		#region onInit
			ngOnInit(): void {
				this.currPrdId = Number(this.activateRoute.snapshot.paramMap.get('pid'))
				// this.prd=this.prdService.getById(this.currPrdId)
				this.prdIdsList = this.prdService.getPrdIds()
				this.prd = this.prdService.getById(this.currPrdId)
				this.activateRoute.paramMap.subscribe(x => this.currPrdId = Number(x.get('pid')))
			}
		#endregion

		#region go
			  	getPrdIds(): number[] {
					return this.prdList.map(x=>x.id)
				}
			goPrev() {
				let currentIndex = this.prdIdsList.findIndex(x => x == this.currPrdId)
				let prevIndex
				if (currentIndex > 0) {
					prevIndex = this.prdIdsList[currentIndex - 1]
					this.router.navigate(['/products', prevIndex])
					this.prd = this.prdService.getById(this.currPrdId)
				}
			}
			goNext() {
				let currentIndex = this.prdIdsList.findIndex(x => x == this.currPrdId)
				let nextIndex
				if (currentIndex < this.prdIdsList.length) {
				nextIndex = this.prdIdsList[currentIndex + 1]
				this.router.navigate(['/products', nextIndex])
				this.prd = this.prdService.getById(this.currPrdId)
				}
			}
		#endregion
	#endregion
	#region html mainLayoutPage
		<router-outlet />
	#endregion
	#region app-component
		<app-header/>
		<app-sidebar class="flex justify-center"/>
		<router-outlet />
		<app-footer/>
	#endregion
#endregion

#region rxjs 10
	#region add service
		ng g s ad
	#endregion
	#region ad-services
		private adsList!: string[]
		constructor() {
			this.adsList = [
			"big discounts",
			"sale up to 50%",
			"friday offers",
			"",
			"special Offer"
			]
		}
		getAds(adsInSec: number): Observable<string> {
			return new Observable<string>(x => {
			// x.next();x.error();x.complete()
			let counter = 0
			let adsTimer = setInterval(() => {
				if (counter == this.adsList.length) {
				x.complete()
				}
				else if (this.adsList[counter] == '') {
				x.error('empty ads')
				}
				else {
				x.next(this.adsList[counter])
				counter++
				}
			}, adsInSec * 1000)
			})
		}
	#endregion

	#region service inject
		private Subscription!:Subscription
		constructor(private ads:AdsService){}

		ngOnInit(): void {
				this.Subscription=this.ads.getAds(3).subscribe(
					{
						next:x=>console.log(x),
						error:err=>console.log(err),
						complete:()=>{console.log('complete')}
					}
				)
			}
			ngOnDestroy(): void {
				this.Subscription.unsubscribe()
			}
	#endregion
#endregion

#region operators 11
	https://reactivex.io/documentation/operators.html

	#region service
	    getSerialAds():Observable<string>{
			return from(this.adsList) // from database list
			// return of("a","b","c") // of this objects
		}
	#endregion

	#region home
		ngOnInit(): void {
			// let sub=this.ads.getAds(3).subscribe(
			//   {
			//     next:x=>console.log(x),
			//     error:err=>console.log(err),
			//     complete:()=>{console.log('complete')}
			//   }
			// )
			// this.Subscription.push(sub)
			// let sub =this.ads.getSerialAds().subscribe(x=>{
			//   console.log(x)
			// })
			// this.Subscription.push(sub)
			//pipe return observable could make subscribe after finish
			// let filterAds=this.ads.getAds(3).pipe(
			//   filter(x=>x.includes("friday")),
			//   map(x=>"ad:--"+x)
			// )
			// let subFilter=filterAds.subscribe(
			//   {
			//     next:x=>console.log(x),
			//     error:err=>console.log(err),
			//     complete:()=>{console.log('complete')}
			//   }
			// )
			// this.Subscription.push(subFilter)
			let filterObs=this.ads.getAds(3).pipe(
			retry(3),
			catchError((err, caught) => caught),
			take(30)
			)
			let adsShow=filterObs.subscribe(
					{
						next:x=>console.log(x),
						error:err=>console.log(err),
						complete:()=>{console.log('complete')}
					}
			)
			this.Subscription.push(adsShow)
		}
		getSerialAds():Observable<string>{
			return from(this.adsList)
			// return of("a","b","c")
		}
	#endregion
#endregion

#region subject (observable,observer) 12
	#region subject types
		publish subject =>default
		replay =>start from first subscriber
		behavior =>start from the the last observable next to that observable
	#endregion

	#region services
	  login(username:string,password:string){
			let token='1234'
			localStorage.setItem('token',token)

		}
		logout(){
			localStorage.removeItem('token')
		}
		get isUserLogged():boolean{
			if(localStorage.getItem('token')){
			return true
			}
			return false
		}
	#endregion

	#region login ts
		private isLoggedSub!:BehaviorSubject<boolean>
		
		constructor() { 
			this.isLoggedSub=new BehaviorSubject<boolean>(false)
		}
		
		login(username:string,password:string){
			let token='1234'
			localStorage.setItem('token',token)
			this.isLoggedSub.next(true)

		}
		logout(){
			localStorage.removeItem('token')
			this.isLoggedSub.next(false)
		}
		get isUserLogged():boolean{
			return localStorage.getItem('token')?true:false
		}
		isLoggedSubject():Observable<boolean>{
			return this.isLoggedSub
		}
	#endregion

	#region login html
		<li [hidden]="!isLogged"> 
			<div [routerLink]="['/login']" [routerLinkActive]="['text-green-500']" [hidden]="!isLogged"
				class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700">login</div>
		</li>
		<li [hidden]="isLogged">
			<div [routerLink]="['/logout']" [routerLinkActive]="['text-green-500']" [hidden]="isLogged"
				class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700 focus:border-2" >logout</div>
		</li>
	#endregion
#endregion

#region guard 13
	ng g g auth --functional=false

	{path:'products/:pid',component:ProductDetailsComponent,canActivate:[AuthGuard]},

	#region message 
		export class AuthGuard implements CanActivate {
		constructor(private auth: AuthService, private router: Router) { }
			canActivate(
				route: ActivatedRouteSnapshot,
				state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
				if (this.auth.isUserLogged) {
				return true
				} else {
				alert("not logged")
				this.router.navigate(['/login'])
				return false
				}
			}

		}
	#endregion
#endregion

#region httpClient 14
	#region ngModel
		import {  HttpClientModule } from '@angular/common/http';
		HttpClientModule
	#endregion

	#region install
		npm i -g json-server
		npm i json-server
		json-server --watch db.json
	#endregion

	#region db.json make it like this
		{
			"products": [
				{
					"id": 1,
					"name": "p1",
					"price": 100,
					"quantity": 1,
					"imgUrl": "https://picsum.photos/2000/1100",
					"categoryId": 1
				},
				{
					"id": 2,
					"name": "p2",
					"price": 110,
					"quantity": 2,
					"imgUrl": "https://picsum.photos/2000/1200",
					"categoryId": 2
				},
				{
					"id": 3,
					"name": "p3",
					"price": 120,
					"quantity": 0,
					"imgUrl": "https://picsum.photos/2000/1300",
					"categoryId": 3
				},
				{
					"id": 4,
					"name": "p4",
					"price": 130,
					"quantity": 4,
					"imgUrl": "https://picsum.photos/2000/1400",
					"categoryId": 4
				},
				{
					"id": 5,
					"name": "p5",
					"price": 140,
					"quantity": 5,
					"imgUrl": "https://picsum.photos/2000/1500",
					"categoryId": 1
				},
				{
					"id": 6,
					"name": "p6",
					"price": 150,
					"quantity": 6,
					"imgUrl": "https://picsum.photos/2000/1600",
					"categoryId": 1
				}
			],
			"category":[
				{"id":1,"name":"c1"},
				{"id":2,"name":"c2"},
				{"id":3,"name":"c3"},
				{"id":4,"name":"c4"}
			]
		}
	#endregion 

	#region crud
		ng g environments
		constructor(private http: HttpClient) { }
		get(): Observable<StaticProduct[]> {
			return this.http.get<StaticProduct[]>(`${environment.apiLink}/products`)
		}
		getCat(): Observable<ICategory[]> {
			return this.http.get<ICategory[]>(`${environment.apiLink}/category`)
		}
		getByCat(catId:number): Observable<StaticProduct[]> {
			return this.http.get<StaticProduct[]>(`${environment.apiLink}/products?categoryId=${catId}`)
		}
		getById(id:number): Observable<StaticProduct> {
			return this.http.get<StaticProduct>(`${environment.apiLink}/products/${id}`)
		}
		// add(newPrd:StaticProduct): Observable<StaticProduct> {
		//   return this.http.post<StaticProduct>(`${environment.apiLink}/products`)
		// }
		// edit(Prd:StaticProduct): Observable<StaticProduct> {
		//   return this.http.put<StaticProduct>(`${environment.apiLink}/products`)
		// }
		delete(): Observable<StaticProduct> {
			return this.http.delete<StaticProduct>(`${environment.apiLink}/products`)
		}
	#endregion

	#region ts prdList
		constructor(
			private prd:PrdService,
			// private productService: ProductsService, 
			private router: Router) {
			this.dateNow = new Date()
			this.totalPriceChanged = new EventEmitter<number>()
		}
		ngOnChanges(): void {
			// this.prdListOfCat = this.productService.getAllByCatId(+this.sentCatId)
			this.prd.getByCat(+this.sentCatId).subscribe(x=>this.prdListOfCat=x)
		}
		ngOnInit(): void {
			this.prd.get().subscribe(x=>this.prdListOfCat=x)
		}
	#endregion

	#region handleError
		post method
		add(newPrd: StaticProduct): Observable<StaticProduct> {
			return this.http
			.post<StaticProduct>(`${environment.apiLink}/products`, JSON.stringify(newPrd), this.headerOpt)
			.pipe(
				retry(2),
				catchError(
				//   (x) => {
				//   return throwError(() => new Error(x))
				// }
				this.handleError
				)
			)
		}
		private handleError(x:HttpErrorResponse){
			if(x.error===0){
			console.error(x.error)
			}else{
			console.error(`error status${x.status} and error is`,x.error)
			
			}
			return throwError(() => new Error('error exist')) 
		}

		get(): Observable<StaticProduct[]> {
			return this.http.get<StaticProduct[]>(`${environment.apiLink}/products`)
			.pipe(
			retry(2),
			catchError(this.handleError)
			)
  		}

		headerOpt;
		constructor(private http: HttpClient) {
				this.headerOpt = {
				headers: new HttpHeaders({
					'Content-Type': 'application/json'
				})
			}
		}
	#endregion

	#region add product
		showToaster:boolean=false
		constructor(private prd:PrdService,private route:Router){}

		addProduct(){
			const prd1:StaticProduct={
			id: 100,
			name: 'p100',
			price: 100,
			quantity: 1,
			imgUrl: 'https://picsum.photos/2000/1100',
			categoryId: 1
			}
			this.prd.add(prd1).subscribe(x=>{
			this.showToaster=true
			setTimeout(() => {
				this.showToaster = false;
				this.route.navigateByUrl('/products')
			}, 5000);
			return x
			})
		}
	#endregion

	#region toaster
		<div id="toast-interactive" *ngIf="showToaster" class="w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow dark:bg-gray-800 dark:text-gray-400" role="alert">
			<div class="flex">
				<div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-blue-500 bg-blue-100 rounded-lg dark:text-blue-300 dark:bg-blue-900">
					<svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
						<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 1v5h-5M2 19v-5h5m10-4a8 8 0 0 1-14.947 3.97M1 10a8 8 0 0 1 14.947-3.97"/>
					</svg>
					<span class="sr-only">Refresh icon</span>
				</div>
				<div class="ms-3 text-sm font-normal">
					<span class="mb-1 text-sm font-semibold text-gray-900 dark:text-white">Update available</span>
					<div class="mb-2 text-sm font-normal">A new software version is available for download.</div> 
					<div class="grid grid-cols-2 gap-2">
						<div>
							<a href="#" class="inline-flex justify-center w-full px-2 py-1.5 text-xs font-medium text-center text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-800">Update</a>
						</div>
						<div>
							<a href="#" class="inline-flex justify-center w-full px-2 py-1.5 text-xs font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 dark:bg-gray-600 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700">Not now</a> 
						</div>
					</div>    
				</div>
				<button type="button" class="ms-auto -mx-1.5 -my-1.5 bg-white items-center justify-center flex-shrink-0 text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-interactive" aria-label="Close">
					<span class="sr-only">Close</span>
					<svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
						<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
					</svg>
				</button>
			</div>
		</div>

		    <button type="submit" (click)="addProduct()"
        
		<button type="submit" (click)="addProduct()"
			class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
			Register new account
		</button>
	#endregion

	#region generic crud and generic response
		no implementation
	#endregion
#endregion	

#region form 15
	#region template driven
		directive,mutable (allow change),async,static
	#endregion

	#region class ng
		touched untouched | dirty pristine | valid invalid
	#endregion

	#region reactive form
		ReactiveFormsModule //imports

		#region html reactive form
			<form class="max-w-sm mx-auto" [formGroup]="register">
				<div class="mb-5">
					<label for="fullName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Full Name</label>
					<input type="text" id="fullName" name="fullName" formControlName="fullName"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Full Name" required />
				</div>

				<div class="mb-5">
					<label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
					<input type="email" id="email" name="email" formControlName="email"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Full Name" required />
				</div>

				<div class="mb-5" formGroupName="address">
					<div>
						<label for="city" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">City</label>
						<input type="text" id="city" name="city" formControlName="city"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your city" required />
					</div>
					<div>
						<label for="postalCode" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Postal Code</label>
						<input type="text" id="postalCode" name="postalCode" formControlName="postalCode"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Postal Code" required />
					</div>
					<div>
						<label for="street" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Street</label>
						<input type="text" id="street" name="street" formControlName="street"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Street" required />
					</div>
				</div>

				<div class="mb-5">
					<label for="phoneNumber" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Phone Number</label>
					<input type="number" id="phoneNumber" name="phoneNumber" formControlName="phoneNumber"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Phone Number" required />
				</div>

				<div class="mb-5">
					<label for="password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Password</label>
					<input type="password" id="password" name="password" formControlName="password"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Password" required />
				</div>

				<div class="mb-5">
					<label for="confirmPassword" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Confirm Password</label>
					<input type="password" id="confirmPassword" name="confirmPassword" formControlName="confirmPassword"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Password" required />
				</div>

				<div class="flex items-start mb-5">
					<div class="flex items-center h-5">
						<input id="remember" type="checkbox" value=""
							class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800"
							required />
					</div>
					<label for="remember" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Remember me</label>
				</div>

				<button type="submit"
					class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
					Submit
				</button>
			</form>

			<div class="flex justify-center text-violet-500">
				{{register.value | json}}
				<div class="grid text-red-500">

					{{register.get('fullName')?.errors | json}}
				</div>
			</div>
		#endregion

		#region ts reactive form before formBuilder
			register!:FormGroup;
			constructor(){
				this.register=new FormGroup(
				{
					fullName:new FormControl('',[Validators.required,Validators.pattern('[A-Za-z]{3}')]),
					email:new FormControl(''),
					phoneNumber:new FormControl(''),
					address:new FormGroup({
					city:new FormControl(''),
					postalCode:new FormControl(''),
					street:new FormControl('')
					}),
					password:new FormControl(''),
					confirmPassword:new FormControl(''),

				}
				)
			}
		#endregion

		#region reactive form after formBuilder ts
			constructor(private registerService: FormBuilder) {

				this.register = registerService.group(
				{
					fullName: ['', [Validators.required, Validators.pattern('[A-Za-z]{3}')]],
					email: ['',[Validators.required]],
					phoneNumber: [''],
					address: registerService.group({
					city: [''],
					postalCode: [''],
					street: [''],
					}),
					password: [''],
					confirmPassword: [''],
				}
				)
			}
		#endregion

		#region get method html vs ts
			{{register.get('fullName')?.errors | json}} 

			//in ts 

			get fullName(){
				return this.register.get('fullName')
			}

			{{fullName?.errors | json}}
		#endregion

		#region fill 
			fillForm() {
				this.register.patchValue( //all value ,.patchValue some values
				{
					fullName: "iti",
					email: "mostafamohamedtaha.udemy@gmail.com",
					address: {
					city: "cairo",
					postalCode: "123123",
					street: "nasr"
					}
				}
				)
			}

			<button (click)="fillForm()"
				class="mx-2 text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
				auto fill form
			</button>
		#endregion

		#region submit 
			submit() {
				let registerUser: IUser = this.register.value as IUser
				console.log(registerUser)
			}
			<form class="grid grid-cols-4" [formGroup]="register" (ngSubmit)="submit()">
		#endregion

		#region add multi numbers
			get phoneNumbers() {
				return this.register.get('phoneNumber') as FormArray
			}
			addNumber(event: any) {
				this.phoneNumbers.controls.push(this.registerService.control(''));
				event.target?.classList.add('hidden')
			}

			<div formArrayName="phoneNumber" class="mb-5" *ngFor="let phoneNumber of phoneNumbers.controls;let i=index">
				<label for="{{'phoneNumber'+i+1}}" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
					phone number # {{i+1}}
				</label>

				<input type="number" id="{{'phoneNumber'+i+1}}" name="{{'phoneNumbers'+i}}" [formControlName]="i"
					class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
					placeholder="Please Enter Your Phone Number" required />

				<button (click)="addNumber($event)"
					class="my-2 text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:outline-none focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800">
					+
				</button>
			</div>
		#endregion

		#region model after referral
			export interface IUser {
				fullName:string
				email:string
				phoneNumber:string[]
				address:{
					city:string
					postalCode:string
					street:string
				}
				password:string
				referral:string[]
				referralOther:string[]
			}
		#endregion

		#region validator after referral
			this.register = registerService.group(
				{
				fullName: ['', [Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
				email: ['', [Validators.required]],
				phoneNumber: registerService.array(['']),
				address: registerService.group({
					city: [''],
					postalCode: [''],
					street: [''],
				}),
				password: [''],
				confirmPassword: [''],
				referral:[''],
				referralOther:[
					'',
					[Validators.required, Validators.pattern('[A-Za-z]{3,}')] 
				],
				}
			)
		#endregion

		#region referral radio html
			<div class="flex justify-center my-3">
				<div class="flex items-center me-4" >
					<input id="referral1" type="radio" value="socialMedia" name="referral" formControlName="referral"
						class="w-4 h-4 text-red-600 bg-gray-100 border-gray-300 focus:ring-red-500 dark:focus:ring-red-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" (change)="updateReferralValidator"> 
					<label for="red-radio" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Social Media</label>
				</div>
				<div class="flex items-center me-4" >
					<input id="referral2" type="radio" value="friend" name="referral" formControlName="referral"
						class="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" (change)="updateReferralValidator">
					<label for="green-radio" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Friend</label>
				</div>
				<div class="flex items-center me-4" >
					<input checked id="referral3" type="radio" value="referralOther" name="referral" formControlName="referral"
						class="w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 focus:ring-purple-500 dark:focus:ring-purple-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" (change)="updateReferralValidator">
					<label for="purple-radio"
						class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">referralOther</label>
				</div>
			</div>
			<div class="mb-5" *ngIf="referral?.value=='referralOther'">
				<label for="referralOther" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">referralOther</label>
				<input type="text" id="referralOther" name="referralOther" formControlName="referralOther"
					class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
					placeholder="Please Enter Your Email" required />
			</div>
		#endregion

		#region referral ts
			get referral() {
				return this.register.get('referral') 
			}
			get updateReferralValidator() {
			if(this.referral?.value=='referralOther'){
				this.register.get('referralOther')?.addValidators( [Validators.required, Validators.pattern('[A-Za-z]{3,}')])
			}else{
				this.register.get('referralOther')?.clearValidators()
			}
			return this.register.get('referralOther')?.updateValueAndValidity()
			}
		#endregion

		#region ctor existMail
			register!: FormGroup;
			existUserEmail: string[] = []
			constructor(private registerService: FormBuilder) {
				this.existUserEmail = [
				"aaa@aaa.com",
				"bbb@bbb.com",
				"ccc@ccc.com",
				"ddd@ddd.com"
				]
				this.register = registerService.group(
				{
					fullName: ['', [Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
					email: ['', [Validators.required, this.existEmailValidator(this.existUserEmail)]],
					phoneNumber: registerService.array(['']),
					address: registerService.group({
					city: [''],
					postalCode: [''],
					street: [''],
					}),
					password: [''],
					confirmPassword: [''],
					referral: [''],
					referralOther: [
					'',
					[Validators.required, Validators.pattern('[A-Za-z]{3,}')]
					],
				}
				)
			}
		#endregion

		#region existMail
			get email() {
				return this.register.get('email')
			}
			existEmailValidator(existEmails: string[]): ValidatorFn {
				return (control: AbstractControl): ValidationErrors | null => {
				let emailValue: string = control.value
				let validationError = {
					"existEmail": {
					"value": emailValue
					}
				}
				if (control.untouched && emailValue.length == 0)
					return null
				let foundEmail = existEmails.includes(emailValue)
				// return emailValue.includes('@')?null:validationError
				return foundEmail ? validationError : null
				}
			}
		#endregion

		#region html existMail
			<div class="mb-5">
				<label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
				<input type="email" id="email" name="email" formControlName="email"
					class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
					placeholder="Please Enter Your Email" required />
					<div [hidden]="email?.valid || email?.untouched">
						<div
							class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">
		
							<div class="ms-3 text-sm font-medium" *ngIf="email?.errors?.['required']">
								Please Fill This Input
							</div>
							<!-- <div class="ms-3 text-sm font-medium" *ngIf="email?.errors?.['emailNotValid'] ">
								Please Fill This Input at least 3 letters {{email?.errors?.['emailNotValid'].value }} not
								matching
							</div> -->
							<div class="ms-3 text-sm font-medium" *ngIf="email?.errors?.['existEmail'] ">
								Please Fill This Input at least 3 letters {{email?.errors?.['existEmail'].value }} not
								matching
							</div>
						</div>
					</div>
			</div>
		#endregion

		#region matchPassword
			import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';
			export function passwordMatch(complexPassword:boolean=false):ValidatorFn{
				return(control:AbstractControl):ValidationErrors|null=>{
					let passwordControl=control.get('password')
					let confirmPasswordControl=control.get('confirmPassword')
					// if(!passwordControl || !confirmPasswordControl || !passwordControl.value || !confirmPasswordControl.value)
					//     return null
					let valueError={
						unmatchedPassword:{
							"password":passwordControl?.value,
							"confirmPassword":confirmPasswordControl?.value
						}
					}
					return passwordControl?.value==confirmPasswordControl?.value?null:valueError
				}
			}
		#endregion

		#region password ts
			get password(){
				return this.register.get('password')
			}
			get confirmPassword(){
				return this.register.get('confirmPassword')
			}

			#region ctor
				constructor(private registerService: FormBuilder) {
					this.existUserEmail = [
					"aaa@aaa.com",
					"bbb@bbb.com",
					"ccc@ccc.com",
					"ddd@ddd.com"
					]
					this.register = registerService.group(
					{
						fullName: ['', [Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
						email: ['', [Validators.required, this.existEmailValidator(this.existUserEmail)]],
						phoneNumber: registerService.array(['']),
						address: registerService.group({
						city: [''],
						postalCode: [''],
						street: [''],
						}),
						password: ['',[Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
						confirmPassword: ['',[Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
						referral: [''],
						referralOther: [
						'',
						[Validators.required, Validators.pattern('[A-Za-z]{3,}')]
						],
					},
					{
						// Validators:[passwordMatch()]
						validators:passwordMatch()
					}
					)

				}
			#endregion
		#endregion

		#region password html
			<div class="mb-5">
				<label for="password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Password</label>
				<input type="password" id="password" name="password" formControlName="password"
					class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
					placeholder="Please Enter Your Password" required />
				<div *ngIf="password?.invalid && register?.errors?.['unmatchedPassword']">

					<div *ngIf="(password?.touched && confirmPassword?.touched) && (password?.invalid || !(register?.errors?.['unmatchedPassword']))"
						class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">

						<div class="ms-3 text-sm font-medium"
							*ngIf="password?.errors?.['required'] && password?.touched">
							Please Fill This Input
						</div>
						<div class="ms-3 text-sm font-medium" *ngIf="register?.errors?.['unmatchedPassword'] ">
							Please Fill This Input at least 3 letters not
							matching
						</div>
					</div>
				</div>
			</div>

			<div class="mb-5">
				<label for="confirmPassword" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Confirm
					Password</label>
				<input type="password" id="confirmPassword" name="confirmPassword" formControlName="confirmPassword"
					class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
					placeholder="Please Enter Your Password" required />
					<div *ngIf="confirmPassword?.invalid && register?.errors?.['unmatchedPassword']">
						<div *ngIf="(password?.touched && confirmPassword?.touched) && (confirmPassword?.invalid || !(register?.errors?.['unmatchedPassword']))"
							class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">
			
							<div class="ms-3 text-sm font-medium"
								*ngIf="confirmPassword?.errors?.['required'] && confirmPassword?.touched">
								Please Fill This Input
							</div>
							<div class="ms-3 text-sm font-medium" *ngIf="register?.errors?.['unmatchedPassword'] ">
								Please Fill This Input at least 3 letters not
								matching
							</div>
						</div>
					</div>
			</div>
		#endregion
	#endregion

	#region full reactive form html
		<form class="grid grid-cols-4" [formGroup]="register" (ngSubmit)="submit()">
			<div class="grid col-span-1 mx-3">
				<div class="mb-5">
					<label for="fullName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Full Name</label>
					<input type="text" id="fullName" name="fullName" formControlName="fullName"
						[class.is-valid]="fullName?.valid"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Full Name" required />
					<div [hidden]="fullName?.valid || fullName?.untouched">
						<div
							class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">

							<div class="ms-3 text-sm font-medium" *ngIf="fullName?.errors?.['required']">
								Please Fill This Input
							</div>
							<div class="ms-3 text-sm font-medium" *ngIf="fullName?.errors?.['pattern'] ">
								Please Fill This Input at least 3 letters {{fullName?.errors?.['pattern'].actualValue }} not
								matching
							</div>
						</div>
					</div>
				</div>

				<div class="mb-5">
					<label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
					<input type="email" id="email" name="email" formControlName="email"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Email" required />
					<div [hidden]="email?.valid || email?.untouched">
						<div
							class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">

							<div class="ms-3 text-sm font-medium" *ngIf="email?.errors?.['required']">
								Please Fill This Input
							</div>
							<!-- <div class="ms-3 text-sm font-medium" *ngIf="email?.errors?.['emailNotValid'] ">
									Please Fill This Input at least 3 letters {{email?.errors?.['emailNotValid'].value }} not
									matching
								</div> -->
							<div class="ms-3 text-sm font-medium" *ngIf="email?.errors?.['existEmail'] ">
								Please Fill This Input at least 3 letters {{email?.errors?.['existEmail'].value }} not
								matching
							</div>
						</div>
					</div>
				</div>

				<div class="mb-5" formGroupName="address">
					<div>
						<label for="city" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">City</label>
						<input type="text" id="city" name="city" formControlName="city"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your city" required />
					</div>
					<div>
						<label for="postalCode" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Postal
							Code</label>
						<input type="text" id="postalCode" name="postalCode" formControlName="postalCode"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Postal Code" required />
					</div>
					<div>
						<label for="street" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Street</label>
						<input type="text" id="street" name="street" formControlName="street"
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
							placeholder="Please Enter Your Street" required />
					</div>
				</div>

				<div class="flex justify-center my-3">
					<div class="flex items-center me-4">
						<input id="referral1" type="radio" value="socialMedia" name="referral" formControlName="referral"
							class="w-4 h-4 text-red-600 bg-gray-100 border-gray-300 focus:ring-red-500 dark:focus:ring-red-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
							(change)="updateReferralValidator">
						<label for="red-radio" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Social
							Media</label>
					</div>
					<div class="flex items-center me-4">
						<input id="referral2" type="radio" value="friend" name="referral" formControlName="referral"
							class="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
							(change)="updateReferralValidator">
						<label for="green-radio"
							class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Friend</label>
					</div>
					<div class="flex items-center me-4">
						<input checked id="referral3" type="radio" value="referralOther" name="referral"
							formControlName="referral"
							class="w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 focus:ring-purple-500 dark:focus:ring-purple-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
							(change)="updateReferralValidator">
						<label for="purple-radio"
							class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">referralOther</label>
					</div>
				</div>

				<div class="mb-5" *ngIf="referral?.value=='referralOther'">
					<label for="referralOther"
						class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">referralOther</label>
					<input type="text" id="referralOther" name="referralOther" formControlName="referralOther"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Email" required />
				</div>

				<button (click)="fillForm()"
					class="mx-2 text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
					auto fill form
				</button>
			</div>
			<div class="grid col-span-1 mx-3 ">
				<div formArrayName="phoneNumber" class="mb-5" *ngFor="let phoneNumber of phoneNumbers.controls;let i=index">
					<label for="{{'phoneNumber'+i+1}}" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
						phone number # {{i+1}}
					</label>

					<input type="number" id="{{'phoneNumber'+i+1}}" name="{{'phoneNumbers'+i}}" [formControlName]="i"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Phone Number" required />

					<button (click)="addNumber($event)"
						class="my-2 text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:outline-none focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800">
						+
					</button>
				</div>


				<div class="mb-5">
					<label for="password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Password</label>
					<input type="password" id="password" name="password" formControlName="password"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Password" required />
					<div *ngIf="password?.invalid && register?.errors?.['unmatchedPassword']">

						<div *ngIf="(password?.touched && confirmPassword?.touched) && (password?.invalid || !(register?.errors?.['unmatchedPassword']))"
							class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">

							<div class="ms-3 text-sm font-medium"
								*ngIf="password?.errors?.['required'] && password?.touched">
								Please Fill This Input
							</div>
							<div class="ms-3 text-sm font-medium" *ngIf="register?.errors?.['unmatchedPassword'] ">
								Please Fill This Input at least 3 letters not
								matching
							</div>
						</div>
					</div>
				</div>

				<div class="mb-5">
					<label for="confirmPassword" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Confirm
						Password</label>
					<input type="password" id="confirmPassword" name="confirmPassword" formControlName="confirmPassword"
						class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
						placeholder="Please Enter Your Password" required />
						<div *ngIf="confirmPassword?.invalid && register?.errors?.['unmatchedPassword']">
							<div *ngIf="(password?.touched && confirmPassword?.touched) && (confirmPassword?.invalid || !(register?.errors?.['unmatchedPassword']))"
								class="flex items-center p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800">
				
								<div class="ms-3 text-sm font-medium"
									*ngIf="confirmPassword?.errors?.['required'] && confirmPassword?.touched">
									Please Fill This Input
								</div>
								<div class="ms-3 text-sm font-medium" *ngIf="register?.errors?.['unmatchedPassword'] ">
									Please Fill This Input at least 3 letters not
									matching
								</div>
							</div>
						</div>
				</div>

				<div class="flex items-start mb-5">
					<div class="flex items-center h-5">
						<input id="remember" type="checkbox" value=""
							class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800"
							required />
					</div>
					<label for="remember" class="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Remember me</label>
				</div>



				<button type="submit" [disabled]="register.invalid"
					class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
					Submit
				</button>
			</div>
			<div class="grid col-span-2 items-center mx-3">
				<img src="https://picsum.photos/2000/1100" alt="" class="grid justify-center rounded-xl">
			</div>
		</form>

		<div class="grid justify-center text-violet-500">
			<div class="flex">

				{{register.value | json}} |
			</div>
			<div class="grid text-amber-500">

				<!-- {{register.get('fullName')?.errors | json}} -->
				the error is {{fullName?.errors | json}}
			</div>
			<div class="grid text-red-500">
				the error is {{register.get('referralOther')?.errors | json}}
			</div>
			<div class="grid text-cyan-500">
				the error is {{register.get('email')?.errors | json}}
			</div>
		</div>
	#endregion

	#region full ts reactive form
		export class RegisterComponent {
		register!: FormGroup;
		existUserEmail: string[] = []
		constructor(private registerService: FormBuilder) {
			this.existUserEmail = [
			"aaa@aaa.com",
			"bbb@bbb.com",
			"ccc@ccc.com",
			"ddd@ddd.com"
			]
			this.register = registerService.group(
			{
				fullName: ['', [Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
				email: ['', [Validators.required, this.existEmailValidator(this.existUserEmail)]],
				phoneNumber: registerService.array(['']),
				address: registerService.group({
				city: [''],
				postalCode: [''],
				street: [''],
				}),
				password: ['',[Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
				confirmPassword: ['',[Validators.required, Validators.pattern('[A-Za-z]{3,}')]],
				referral: [''],
				referralOther: [
				'',
				[Validators.required, Validators.pattern('[A-Za-z]{3,}')]
				],
			},
			{
				// Validators:[passwordMatch()]
				validators:passwordMatch()
			}
			)
		}
		get fullName() {
			return this.register.get('fullName')
		}
		// this.register=new FormGroup(
		//   {
		//     fullName:new FormControl('',[Validators.required,Validators.pattern('[A-Za-z]{3}')]),
		//     email:new FormControl(''),
		//     phoneNumber:new FormControl(''),
		//     address:new FormGroup({
		//       city:new FormControl(''),
		//       postalCode:new FormControl(''),
		//       street:new FormControl('')
		//     }),
		//     password:new FormControl(''),
		//     confirmPassword:new FormControl(''),

		//   }
		// )
		get referral() {
			return this.register.get('referral')
		}
		get updateReferralValidator() {
			if (this.referral?.value == 'referralOther') {
			this.register.get('referralOther')?.addValidators([Validators.required, Validators.pattern('[A-Za-z]{3,}')])
			} else {
			this.register.get('referralOther')?.clearValidators()
			}
			return this.register.get('referralOther')?.updateValueAndValidity()
		}
		fillForm() {
			this.register.patchValue( //all value ,.patchValue some values
			{
				fullName: "iti",
				email: "mostafamohamedtaha.udemy@gmail.com",
				address: {
				city: "cairo",
				postalCode: "123123",
				street: "nasr"
				}
			}
			)
		}
		submit() {
			let registerUser: IUser = this.register.value as IUser
			console.log(registerUser)
		}
		get phoneNumbers() {
			return this.register.get('phoneNumber') as FormArray
		}
		addNumber(event: any) {
			this.phoneNumbers.controls.push(this.registerService.control(''));
			event.target?.classList.add('hidden')
		}

		get email() {
			return this.register.get('email')
		}
		existEmailValidator(existEmails: string[]): ValidatorFn {
			return (control: AbstractControl): ValidationErrors | null => {
			let emailValue: string = control.value
			let validationError = {
				"existEmail": {
				"value": emailValue
				}
			}
			if (control.untouched && emailValue.length == 0)
				return null
			let foundEmail = existEmails.includes(emailValue)
			// return emailValue.includes('@')?null:validationError
			return foundEmail ? validationError : null
			}
		}

		get password(){
			return this.register.get('password')
		}
		get confirmPassword(){
			return this.register.get('confirmPassword')
		}
		}
	#endregion

	#region full passwordMatch
		export function passwordMatch(complexPassword:boolean=false):ValidatorFn{
			return(control:AbstractControl):ValidationErrors|null=>{
				let passwordControl=control.get('password')
				let confirmPasswordControl=control.get('confirmPassword')
				// if(!passwordControl || !confirmPasswordControl || !passwordControl.value || !confirmPasswordControl.value)
				//     return null
				let valueError={
					unmatchedPassword:{
						"password":passwordControl?.value,
						"confirmPassword":confirmPasswordControl?.value
					}
				}
				return passwordControl?.value==confirmPasswordControl?.value?null:valueError
			}
		}
	#endregion
#endregion

#region lazy loading 16

#endregion

#region building localization 17

#endregion